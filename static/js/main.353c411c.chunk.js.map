{"version":3,"sources":["components/Loader/Loader.module.css","services/pixabay-api.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Loader/Loader.js","components/Button/Button.js","components/imagesInfo/imagesInfo.js","components/Searchbar/Searchbar.js","App.js","index.js"],"names":["module","exports","api","fetchImages","imageName","page","fetch","then","response","ok","json","Promise","rejected","Error","modalRoot","document","querySelector","Modal","onClose","alt","src","useState","loading","setLoading","toggleLoading","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","className","onClick","target","currentTarget","onLoad","type","color","height","width","ImageGalleryItem","largeImageUrl","showModal","setshowModal","toggleModal","ImageGallery","images","map","image","webformatURL","tags","largeImageURL","id","App","s","loader","Button","Status","ImagesInfo","setImages","setPage","error","setError","status","setStatus","setShowButton","galeryAPI","newImages","total","reject","prevImages","hits","catch","scrollTo","top","documentElement","scrollHeight","behavior","message","Searchbar","onSubmit","setImageName","event","preventDefault","trim","toast","info","autoComplete","autoFocus","placeholder","value","onChange","toLowerCase","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"wIACAA,EAAOC,QAAU,CAAC,OAAS,yB,kKCU3B,IAIeC,EAJH,CACVC,YAZF,SAAqBC,EAAWC,GAC9B,OAAOC,MAAM,8BAAD,OACoBF,EADpB,iBACsCC,EADtC,8FAEVE,MAAK,SAACC,GACN,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,SAAS,IAAIC,MAAJ,iC,gBCDtBC,G,MAAYC,SAASC,cAAc,gBAE1B,SAASC,EAAT,GAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,IAAKC,EAAO,EAAPA,IAAO,EACrBC,oBAAS,GADY,mBAC5CC,EAD4C,KACnCC,EADmC,KAG7CC,EAAgB,WACpBD,GAAW,SAAAD,GAAO,OAAKA,MAGzBG,qBAAU,WACR,IAAMC,EAAgB,SAAAC,GACL,WAAXA,EAAEC,MACJV,KAKJ,OAFAM,IACAK,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,CAACR,IAQJ,OAAOc,uBACL,qBAAKC,UAAU,UAAUC,QAPC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAA4B,EAApBC,gBACfD,GACpBjB,KAKF,SACE,sBAAKe,UAAU,QAAf,UACE,qBAAKb,IAAKA,EAAKD,IAAKA,EAAKkB,OAAQb,IAChCF,GACC,cAAC,IAAD,CAAQgB,KAAK,WAAWC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,WAIlE3B,GCvCW,SAAS4B,EAAT,GAAwD,IAA5BC,EAA2B,EAA3BA,cAAevB,EAAY,EAAZA,IAAKD,EAAO,EAAPA,IAAO,EAClCE,oBAAS,GADyB,mBAC7DuB,EAD6D,KAClDC,EADkD,KAG9DC,EAAc,WAClBD,GAAcD,IAGhB,OACE,qBAAIX,UAAU,mBAAd,UACE,qBACEb,IAAKA,EACLD,IAAKA,EACLe,QAASY,EACTb,UAAU,2BAEXW,GACC,cAAC3B,EAAD,CAAOC,QAAS4B,EAAa1B,IAAKuB,EAAexB,IAAKA,OCE/C4B,MAnBf,YAAmC,IAAXC,EAAU,EAAVA,OACtB,OACE,oBAAIf,UAAU,eAAd,SACGe,EAAOC,KAAI,SAACC,GAAD,OACV,cAACR,EAAD,CACEtB,IAAK8B,EAAMC,aACXhC,IAAK+B,EAAME,KAEXT,cAAeO,EAAMG,eADhBH,EAAMI,U,iBCNN,SAASC,IACtB,OACE,qBAAKtB,UAAWuB,IAAEC,OAAlB,SACE,cAAC,IAAD,CAAQnB,KAAK,WAAWC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,QCLnD,SAASiB,EAAT,GAA8B,IAAZxB,EAAW,EAAXA,QAC/B,OACE,wBAAQI,KAAK,SAASL,UAAU,SAASC,QAASA,EAAlD,uBCGJ,IAAMyB,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAqEGC,MAlEf,YAAsE,IAAhDxD,EAA+C,EAA/CA,UAAW4C,EAAoC,EAApCA,OAAQ3C,EAA4B,EAA5BA,KAAMwD,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QAAW,EACzCzC,mBAAS,IADgC,mBAC5D0C,EAD4D,KACrDC,EADqD,OAEvC3C,mBAASsC,GAF8B,mBAE5DM,EAF4D,KAEpDC,EAFoD,OAG/B7C,oBAAS,GAHsB,mBAGhD8C,GAHgD,WAoCnE,OA/BA1C,qBAAU,WACHrB,IAIL8D,EAAUP,GAEVS,EACGjE,YAAYC,EAAWC,GACvBE,MAAK,SAAA8D,GACJ,KAAIA,EAAUC,MAAQ,GAKpB,OAAO3D,QAAQ4D,OACb,IAAI1D,MAAJ,uEACiDT,EADjD,OALFyD,GAAU,SAAAW,GAAU,4BAAQA,GAAR,YAAuBH,EAAUI,UACrDP,EAAUP,GACVU,EAAUC,MAAQ,EAAIH,GAAc,GAASA,GAAc,MAO9DO,OAAM,SAAAX,GACLC,EAASD,GACTG,EAAUP,SAEb,CAACvD,EAAWC,EAAMwD,IAErBhC,OAAO8C,SAAS,CACdC,IAAK7D,SAAS8D,gBAAgBC,aAC9BC,SAAU,WAGRd,IAAWN,EACN,mBAAG1B,UAAU,WAAb,8CAGLgC,IAAWN,EACN,cAAC,EAAD,IAGLM,IAAWN,EACN,mBAAG1B,UAAU,YAAb,SAA0B8B,EAAMiB,UAGrCf,IAAWN,EAEX,qCACE,cAAC,EAAD,CAAcX,OAAQA,IACrB,cAACU,EAAD,CAAQxB,QAAS,kBAAM4B,EAAQzD,EAAO,cAJ7C,GC1Da,SAAS4E,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAAY,EACZ7D,mBAAS,IADG,mBACvCjB,EADuC,KAC5B+E,EAD4B,KAkB9C,OACE,wBAAQlD,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaiD,SAbZ,SAAAE,GAGnB,GAFAA,EAAMC,iBAEmB,KAArBjF,EAAUkF,OACZ,OAAOC,IAAMC,KAAK,0BAGpBN,EAAS9E,GACT+E,EAAa,KAKX,UACE,wBAAQ7C,KAAK,SAASL,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,sBAGF,uBACEA,UAAU,mBACVK,KAAK,OACLmD,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,MAAOxF,EACPyF,SA7BiB,SAAAT,GACvBD,EAAaC,EAAMhD,cAAcwD,MAAME,uBCF5B,SAASvC,IAAO,IAAD,EACMlC,mBAAS,IADf,mBACrBjB,EADqB,KACV+E,EADU,OAEA9D,mBAAS,IAFT,mBAErB2B,EAFqB,KAEba,EAFa,OAGJxC,mBAAS,GAHL,mBAGrBhB,EAHqB,KAGfyD,EAHe,KAW5B,OACE,qCACE,cAACmB,EAAD,CAAWC,SARE,SAAA9E,GACf+E,EAAa/E,GACbyD,EAAU,IACVC,EAAQ,MAMN,cAAC,EAAD,CACE1D,UAAWA,EACX4C,OAAQA,EACR3C,KAAMA,EACNwD,UAAWA,EACXC,QAASA,IAEX,cAAC,IAAD,CAAgBiC,UAAW,S,MCrBjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnF,SAASoF,eAAe,W","file":"static/js/main.353c411c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1Gc8r\"};","function fetchImages(imageName, page) {\r\n  return fetch(\r\n    `https://pixabay.com/api/?q=${imageName}&page=${page}&key=19012296-41da2131aa4097137b6521ff0&image_type=all&orientation=horizontal&per_page=12`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.rejected(new Error(`No response from server`));\r\n  });\r\n}\r\n\r\nconst api = {\r\n  fetchImages,\r\n};\r\n\r\nexport default api;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal({ onClose, alt, src }) {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const toggleLoading = () => {\r\n    setLoading(loading => !loading);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = e => {\r\n      if (e.code === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n    toggleLoading();\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [onClose]);\r\n\r\n  const handleBackdropClick = ({ target, currentTarget }) => {\r\n    if (currentTarget === target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n      <div className=\"Modal\">\r\n        <img src={src} alt={alt} onLoad={toggleLoading} />\r\n        {loading && (\r\n          <Loader type=\"TailSpin\" color=\"#00BFFF\" height={120} width={120} />\r\n        )}\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport Modal from '../Modal';\r\n\r\nexport default function ImageGalleryItem({ largeImageUrl, src, alt }) {\r\n  const [showModal, setshowModal] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setshowModal(!showModal);\r\n  };\r\n\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={src}\r\n        alt={alt}\r\n        onClick={toggleModal}\r\n        className=\"ImageGalleryItem-image\"\r\n      />\r\n      {showModal && (\r\n        <Modal onClose={toggleModal} src={largeImageUrl} alt={alt} />\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n  largeImageUrl: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem\";\r\n\r\nfunction ImageGallery({ images }) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {images.map((image) => (\r\n        <ImageGalleryItem\r\n          src={image.webformatURL}\r\n          alt={image.tags}\r\n          key={image.id}\r\n          largeImageUrl={image.largeImageURL}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport s from './Loader.module.css';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className={s.loader}>\r\n      <Loader type=\"TailSpin\" color=\"#00BFFF\" height={120} width={120} />\r\n    </div>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Button({ onClick }) {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport galeryAPI from '../../services/pixabay-api';\r\nimport ImageGallery from '../ImageGallery';\r\nimport Loader from '../Loader';\r\nimport Button from '../Button';\r\n\r\nconst Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\n\r\nfunction ImagesInfo({ imageName, images, page, setImages, setPage }) {\r\n  const [error, setError] = useState({});\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [showButton, setShowButton] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!imageName) {\r\n      return;\r\n    }\r\n\r\n    setStatus(Status.PENDING);\r\n\r\n    galeryAPI\r\n      .fetchImages(imageName, page)\r\n      .then(newImages => {\r\n        if (newImages.total > 0) {\r\n          setImages(prevImages => [...prevImages, ...newImages.hits]);\r\n          setStatus(Status.RESOLVED);\r\n          newImages.total < 1 ? setShowButton(false) : setShowButton(true);\r\n        } else\r\n          return Promise.reject(\r\n            new Error(`\r\n                Could not find pictures for the request : \"${imageName}\"`),\r\n          );\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [imageName, page, setImages]);\r\n\r\n  window.scrollTo({\r\n    top: document.documentElement.scrollHeight,\r\n    behavior: 'smooth',\r\n  });\r\n\r\n  if (status === Status.IDLE) {\r\n    return <p className=\"InfoText\">Please enter some search keyword</p>;\r\n  }\r\n\r\n  if (status === Status.PENDING) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (status === Status.REJECTED) {\r\n    return <p className=\"ErrorText\">{error.message}</p>;\r\n  }\r\n\r\n  if (status === Status.RESOLVED) {\r\n    return (\r\n      <>\r\n        <ImageGallery images={images} />\r\n        {<Button onClick={() => setPage(page + 1)} />}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nImagesInfo.propTypes = {\r\n  imageName: PropTypes.string.isRequired,\r\n  images: PropTypes.array.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  setImages: PropTypes.func.isRequired,\r\n  setPage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImagesInfo;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [imageName, setImageName] = useState('');\r\n\r\n  const handleNameChange = event => {\r\n    setImageName(event.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (imageName.trim() === '') {\r\n      return toast.info('Please enter something');\r\n    }\r\n\r\n    onSubmit(imageName);\r\n    setImageName('');\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={imageName}\r\n          onChange={handleNameChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport ImagesInfo from './components/imagesInfo';\nimport Searchbar from './components/Searchbar';\nimport { useState } from 'react';\n\nexport default function App() {\n  const [imageName, setImageName] = useState('');\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n\n  const onSearch = imageName => {\n    setImageName(imageName);\n    setImages([]);\n    setPage(1);\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onSearch} />\n      <ImagesInfo\n        imageName={imageName}\n        images={images}\n        page={page}\n        setImages={setImages}\n        setPage={setPage}\n      />\n      <ToastContainer autoClose={3000} />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}